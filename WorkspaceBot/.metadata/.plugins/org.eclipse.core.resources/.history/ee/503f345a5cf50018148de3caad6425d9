package CallMatches;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.api.objects.Update;
import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.exceptions.TelegramApiException;

import App.Commands;
import DAO.Abilitazione;
import DAO.Links;
import DAO.Queries;
import DAO.User;
import DemoSchedulers.DemoScheduler;

public class CallMatches {

	/**
	 * Fa partire il thread per le "Regole Tecniche Di Web Service" se il thread non è già partito altrimenti notifica
	 * l'utente che hai già attivato le notifiche.
	 * 
	 * @param sc
	 *            l'ogetto SianConnect
	 * @param update
	 *            l'ogetto update telegram
	 */
	public static void RegoleTechnicheWebServices(Commands sc, Update update) {

		if (sc.partito == true) {
			SendMessage message = new SendMessage().setChatId(update.getMessage().getChatId()).setText(
					"Hai attivato già le notifiche per MIPAAF");
			try {
				sc.execute(message);
			} catch (TelegramApiException e) {
				e.printStackTrace();
			}
			return;
		}

		// Thread per Mipaaf Tecniche Web Service
		DemoScheduler demo = new DemoScheduler(sc, update);
		// Thread per Mipaaf Codifiche Registri Vitivinicoli
		try {
			// da qui si fanno partire tutti i thread
			demo.runThreadWithTask();
		} catch (IOException e) {
			e.printStackTrace();
		}

		SendMessage message = new SendMessage().setChatId(update.getMessage().getChatId()).setText(
				"Hai attivato il thread delle notifiche per tutti!");
		try {
			sc.partito = true;
			sc.execute(message);
		} catch (TelegramApiException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Cattura tutti i messaggi che non hanno mappato un CASE nella classe SianConnet
	 * 
	 * @param sc
	 * @param update
	 */
	public static void AllOtherMessages(Commands sc, Update update) {
		try {
			sc.execute(new SendMessage().setChatId(update.getMessage().getChatId()).setText(
					"Clicka /Start per monitorare un sito"));
		} catch (TelegramApiException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Metodo che registra uno nuovo user, nel caso quest'ultimo esistesse già, viene mandato un messaggio di notifica
	 * all'utente
	 * 
	 * @param sc
	 * @param update
	 */
	public static void UserRegistration(Commands sc, Update update) {
		if (Queries.userIdExsist(update.getMessage().getChatId())) {
			try {
				sc.execute(new SendMessage().setChatId(update.getMessage().getChatId()).setText(
						"Utente già esistente"));
			} catch (TelegramApiException e) {
				e.printStackTrace();
			}
		} else {
			User user = new User(update.getMessage().getChatId(), update.getMessage().getChat().getFirstName(), update
					.getMessage().getChat().getLastName(), LocalDateTime.now().toString());
			Queries.InsertUser(user);
			try {
				Long chat_id = update.getMessage().getChatId();
				sc.execute(new SendMessage().setChatId(chat_id).setText("Utente registrato correttamente!"));
				createInlineKeyboardLinks(sc, update);

			} catch (TelegramApiException e) {
				e.printStackTrace();
			}
		}

	}

	/**
	 * Mostra la lista dei sita da controllare
	 * 
	 * @param sc
	 * @param update
	 */
	public static void createInlineKeyboardLinks(Commands sc, Update update) {
		Long chat_id = update.getMessage().getChatId();
		List<Links> links = Queries.getAllLinks();
		if (!links.isEmpty()) {
			InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
			List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
			SendMessage message2 = new SendMessage().setChatId(chat_id).setText(
					"Adesso puoi scegliere i siti da controllare");
			for (Links link : links) {
				List<InlineKeyboardButton> rowInline = new ArrayList<>();
				rowInline.add(new InlineKeyboardButton().setText(link.getDescrizione()).setCallbackData(link
						.getDescrizione()));
				rowsInline.add(rowInline);

			}

			markupInline.setKeyboard(rowsInline);
			message2.setReplyMarkup(markupInline);
			try {
				sc.execute(message2);
			} catch (TelegramApiException e) {
				e.printStackTrace();
			}
		} else {
			try {
				sc.execute(new SendMessage().setChatId(chat_id).setText("Non esistono ancora siti da mostrare!"));
			} catch (TelegramApiException e) {
				e.printStackTrace();
			}
		}

	}

	public static void createAbilitazione(Commands sc, Update update, Long idLink) {
		Abilitazione abilitazione = new Abilitazione(update.getCallbackQuery().getMessage().getChatId(), idLink, false);
		long message_id = update.getCallbackQuery().getMessage().getMessageId();
		long chat_id = update.getCallbackQuery().getMessage().getChatId();
		try {
			if (!Queries.CheckIfExsistLink(abilitazione)) {
				Queries.InsertAbilitazione(abilitazione);
				sc.execute(new EditMessageText().setChatId(chat_id).setMessageId((int) message_id).setText(
						"Ora riceverai notifiche ogna volta che il sito: " + update.getCallbackQuery().getData()
								+ " verrà aggiornato"));

				// qui far partire il thread
				// DemoScheduler demo = new DemoScheduler(sc, update);
				// try {
				// demo.runThreadWithTask();
				// } catch (IOException e) {
				// e.printStackTrace();
				// }
			} else
				sc.execute(new EditMessageText().setChatId(chat_id).setMessageId((int) message_id).setText(
						"Sei già abilitato per ricevere notifica di '" + update.getCallbackQuery().getData()
								+ "'. Ora prenditi una camomilla e prega che il sito non venga aggiornato ;)"));
		} catch (TelegramApiException e) {
			e.printStackTrace();
		}

	}

}
